trigger:
  - master
pr:
  branches:
    include:
      - master
schedules:
  - cron: "0 0 * * *"
    displayName: Daily midnight build
    branches:
      include:
        - master

pool:
  vmImage: "ubuntu-latest"

variables:
  - group: secrets
  - name: dockerhub_org
    value: xmindai
  - name: ubuntu
    value: ubuntu18.04
  - name: azure_dtr
    value: xmind.azurecr.io

stages:
  - stage: DockerDependencyTest
    displayName: "Login to docker hub with service user"
    jobs:
      - job: TestLoginDockerHub
        steps:
          - checkout: none
          - script: echo "$(dockerhub-token)" | docker login -u $(dockerhub-user) --password-stdin
      - job: TestLoginAzureRegistry
        steps:
          - checkout: none
          - script: echo "$(azure-container-registry-password)" | docker login -u $(azure-container-registry-user) --password-stdin $(azure_dtr)
      - job: TestLoginAzureCLI
        steps:
          - checkout: none
          - script: az login --service-principal -u $(acr-automation-id) --password $(acr-automation-password) --tenant $(acr-automation-tenant)
  - stage: Build_CUDA_10
    dependsOn:
      - DockerDependencyTest
    jobs:
      - job: CUDA10
        variables:
          cuda: 10.0
          cudnn: cudnn7
          base_tag: $(cuda)-$(cudnn)-devel-$(ubuntu)
          tag: $(ubuntu)-$(cuda)-$(cudnn)
        displayName: "Build and publish Ubuntu 18.04 CUDA $(tag) containers"
        steps:
          - script: nvidia-cuda-cudnn-opengl/build.sh nvidia/cuda:$(base_tag) $(azure_dtr)/cuda-cudnn-opengl:$(tag)
            displayName: "Build cuda opengl docker"
          - script: cd ci && ./build_cuda_cpp.sh $(azure_dtr)/cuda-cudnn-opengl:$(tag) $(azure_dtr)/cuda-cpp:$(tag) $(cuda)
            displayName: "Build cuda-cpp docker"

          - script: echo "$(azure-container-registry-password)" | docker login -u $(azure-container-registry-user) --password-stdin $(azure_dtr)
            displayName: "Docker login"
          - script: |
              docker push $(azure_dtr)/cuda-cudnn-opengl:$(tag)
              docker push $(azure_dtr)/cuda-cpp:$(tag)
            displayName: "Push all containers"
            condition: and(succeeded(), not(eq(variables['Build.Reason'], 'PullRequest')))
  - stage: Build_CUDA_10_1
    dependsOn:
      - DockerDependencyTest
    jobs:
      - job: CUDA10
        variables:
          cuda: 10.1
          cudnn: cudnn7
          base_tag: $(cuda)-$(cudnn)-devel-$(ubuntu)
          tag: $(ubuntu)-$(cuda)-$(cudnn)
        displayName: "Build and publish Ubuntu 18.04 CUDA $(tag) containers"
        steps:
          - script: nvidia-cuda-cudnn-opengl/build.sh nvidia/cuda:$(base_tag) $(azure_dtr)/cuda-cudnn-opengl:$(tag)
            displayName: "Build cuda opengl docker"
          - script: cd ci && ./build_cuda_cpp.sh $(azure_dtr)/cuda-cudnn-opengl:$(tag) $(azure_dtr)/cuda-cpp:$(tag) $(cuda)
            displayName: "Build cuda-cpp docker"

          - script: echo "$(azure-container-registry-password)" | docker login -u $(azure-container-registry-user) --password-stdin $(azure_dtr)
            displayName: "Docker login"
          - script: |
              docker push $(azure_dtr)/cuda-cudnn-opengl:$(tag)
              docker push $(azure_dtr)/cuda-cpp:$(tag)
            displayName: "Push all containers"
            condition: and(succeeded(), not(eq(variables['Build.Reason'], 'PullRequest')))
  - stage: Build_CUDA_10_2
    dependsOn:
      - DockerDependencyTest
    jobs:
      - job: CUDA10
        variables:
          cuda: 10.2
          cudnn: cudnn7
          base_tag: $(cuda)-$(cudnn)-devel-$(ubuntu)
          tag: $(ubuntu)-$(cuda)-$(cudnn)
        displayName: "Build and publish Ubuntu 18.04 CUDA $(tag) containers"
        steps:
          - script: nvidia-cuda-cudnn-opengl/build.sh nvidia/cuda:$(base_tag) $(azure_dtr)/cuda-cudnn-opengl:$(tag)
            displayName: "Build cuda opengl docker"
          - script: cd ci && ./build_cuda_cpp.sh $(azure_dtr)/cuda-cudnn-opengl:$(tag) $(azure_dtr)/cuda-cpp:$(tag) $(cuda)
            displayName: "Build cuda-cpp docker"

          - script: echo "$(azure-container-registry-password)" | docker login -u $(azure-container-registry-user) --password-stdin $(azure_dtr)
            displayName: "Docker login"
          - script: |
              docker push $(azure_dtr)/cuda-cudnn-opengl:$(tag)
              docker push $(azure_dtr)/cuda-cpp:$(tag)
            displayName: "Push all containers"
            condition: and(succeeded(), not(eq(variables['Build.Reason'], 'PullRequest')))
  - stage: Build_CUDA_10_Python
    dependsOn:
      - Build_CUDA_10
    jobs:
      - job: AZ_ACR_Build
        displayName: "Build CUDA python container with Azure CR build system"
        steps:
          - script: az login --service-principal -u $(acr-automation-id) --password $(acr-automation-password) --tenant $(acr-automation-tenant)
            displayName: "Login to Azure cloud CLI"
          - script: az acr task run --verbose --name cuda-python-10-0 --registry xmind --resource-group MindRSG
            displayName: "Build CUDA python container"
        condition: and(succeeded(), not(eq(variables['Build.Reason'], 'PullRequest')))
  - stage: Build_CUDA_10_1_Python
    dependsOn:
      - Build_CUDA_10_1
    jobs:
      - job: AZ_ACR_Build
        displayName: "Build CUDA python container with Azure CR build system"
        steps:
          - script: az login --service-principal -u $(acr-automation-id) --password $(acr-automation-password) --tenant $(acr-automation-tenant)
            displayName: "Login to Azure cloud CLI"
          - script: az acr task run --verbose --name cuda-python-10-1 --registry xmind --resource-group MindRSG
            displayName: "Build CUDA python container"
        condition: and(succeeded(), not(eq(variables['Build.Reason'], 'PullRequest')))
  - stage: Build_CUDA_10_2_Python
    dependsOn:
      - Build_CUDA_10_2
    jobs:
      - job: AZ_ACR_Build
        displayName: "Build CUDA python container with Azure CR build system"
        steps:
          - script: az login --service-principal -u $(acr-automation-id) --password $(acr-automation-password) --tenant $(acr-automation-tenant)
            displayName: "Login to Azure cloud CLI"
          - script: az acr task run --verbose --name cuda-python-10-2 --registry xmind --resource-group MindRSG
            displayName: "Build CUDA python container"
        condition: and(succeeded(), not(eq(variables['Build.Reason'], 'PullRequest')))
  - stage: CleanAzureCR
    dependsOn:
      - Build_CUDA_10_Python
      - Build_CUDA_10_1_Python
      - Build_CUDA_10_2_Python
    jobs:
      - job: CleanRegistry
        steps:
          - script: az login --service-principal -u $(acr-automation-id) --password $(acr-automation-password) --tenant $(acr-automation-tenant)
            displayName: "Login to Azure cloud CLI"
          - script: az acr run --cmd "acr purge --untagged --filter='cuda-cpp:xxx' --filter='cuda-cudnn-opengl:xxx' --filter='cuda-python:xxx' --filter='cuda-python-test:xxx' --ago=0" --registry xmind /dev/null
            displayName: "Clean all untagged containers in registry"
  - stage: PublishToDockerHub
    dependsOn:
      - CleanAzureCR
    jobs:
      - job: Deploy
        steps:
          - script: az login --service-principal -u $(acr-automation-id) --password $(acr-automation-password) --tenant $(acr-automation-tenant)
            displayName: "Login to Azure cloud CLI"
          - script: ci/deploy_to_dockerhub.sh $(dockerhub-user) $(dockerhub-token) cuda-cudnn-opengl $(ubuntu)-10.0-cudnn7
          - script: ci/deploy_to_dockerhub.sh $(dockerhub-user) $(dockerhub-token) cuda-cpp $(ubuntu)-10.0-cudnn7
          - script: ci/deploy_to_dockerhub.sh $(dockerhub-user) $(dockerhub-token) cuda-python $(ubuntu)-10.0-cudnn7
          - script: ci/deploy_to_dockerhub.sh $(dockerhub-user) $(dockerhub-token) cuda-cudnn-opengl $(ubuntu)-10.1-cudnn7
          - script: ci/deploy_to_dockerhub.sh $(dockerhub-user) $(dockerhub-token) cuda-cpp $(ubuntu)-10.1-cudnn7
          - script: ci/deploy_to_dockerhub.sh $(dockerhub-user) $(dockerhub-token) cuda-python $(ubuntu)-10.1-cudnn7
          - script: ci/deploy_to_dockerhub.sh $(dockerhub-user) $(dockerhub-token) cuda-cudnn-opengl $(ubuntu)-10.2-cudnn7
          - script: ci/deploy_to_dockerhub.sh $(dockerhub-user) $(dockerhub-token) cuda-cpp $(ubuntu)-10.2-cudnn7
          - script: ci/deploy_to_dockerhub.sh $(dockerhub-user) $(dockerhub-token) cuda-python $(ubuntu)-10.2-cudnn7
        condition: and(succeeded(), not(eq(variables['Build.Reason'], 'PullRequest')))
